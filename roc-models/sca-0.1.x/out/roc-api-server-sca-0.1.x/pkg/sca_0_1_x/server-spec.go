// Package sca_0_1_x provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-app.roc.rocaas-tools/rocaas-cli version (devel) DO NOT EDIT.
package sca_0_1_x

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
