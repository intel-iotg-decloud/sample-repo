// Package sra_0_2_x provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-app.roc.rocaas-tools/rocaas-cli version (devel) DO NOT EDIT.
package sra_0_2_x

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
